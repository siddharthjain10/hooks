{"ast":null,"code":"var _jsxFileName = \"/Users/jain/Documents/Projects/JavaScript/react/hooks/src/components/useReducerDataFetching.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst initialState = {\n  loading: true,\n  error: '',\n  post: {}\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'success':\n      return {\n        loading: true,\n        error: '',\n        post: action.payload\n      };\n      break;\n\n    case 'error':\n      return {\n        loading: false,\n        error: 'Something went wrong',\n        post: {}\n      };\n      break;\n\n    default:\n      document.write('DEFAULT');\n      return state;\n  }\n};\n\nfunction UseReducerDataFetching() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    axios.get(`http://jsonplaceholder.typicode.com/posts/1`).then(res => {\n      console.log(res);\n      dispatch({\n        type: 'success',\n        payload: res.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: 'error'\n      });\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, state.loading ? 'Loading' : state.post.title, state.error ? state.error : null);\n}\n\nexport default UseReducerDataFetching;","map":{"version":3,"sources":["/Users/jain/Documents/Projects/JavaScript/react/hooks/src/components/useReducerDataFetching.js"],"names":["React","useReducer","useEffect","axios","initialState","loading","error","post","reducer","state","action","type","payload","document","write","UseReducerDataFetching","dispatch","get","then","res","console","log","data","catch","title"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAG,IADO;AAEjBC,EAAAA,KAAK,EAAG,EAFS;AAGjBC,EAAAA,IAAI,EAAG;AAHU,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,SAAL;AACI,aAAO;AACHN,QAAAA,OAAO,EAAG,IADP;AAEHC,QAAAA,KAAK,EAAG,EAFL;AAGHC,QAAAA,IAAI,EAAGG,MAAM,CAACE;AAHX,OAAP;AAKA;;AACJ,SAAK,OAAL;AACI,aAAO;AACHP,QAAAA,OAAO,EAAG,KADP;AAEHC,QAAAA,KAAK,EAAG,sBAFL;AAGHC,QAAAA,IAAI,EAAG;AAHJ,OAAP;AAMA;;AACJ;AACIM,MAAAA,QAAQ,CAACC,KAAT,CAAe,SAAf;AACA,aAAOL,KAAP;AAlBR;AAqBH,CAtBD;;AAwBA,SAASM,sBAAT,GAAkC;AAE9B,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBf,UAAU,CAACO,OAAD,EAAUJ,YAAV,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACc,GAAN,CAAW,6CAAX,EACCC,IADD,CACMC,GAAG,IAAI;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAH,MAAAA,QAAQ,CAAC;AAACL,QAAAA,IAAI,EAAC,SAAN;AAAiBC,QAAAA,OAAO,EAAEO,GAAG,CAACG;AAA9B,OAAD,CAAR;AACH,KAJD,EAKCC,KALD,CAKOjB,KAAK,IAAI;AACZU,MAAAA,QAAQ,CAAC;AAACL,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACH,KARD;AASH,GAVQ,EAUP,EAVO,CAAT;AAYA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,KAAK,CAACJ,OAAN,GAAgB,SAAhB,GAA4BI,KAAK,CAACF,IAAN,CAAWiB,KAD5C,EAEKf,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAApB,GAA4B,IAFjC,CADJ;AAMH;;AAED,eAAeS,sBAAf","sourcesContent":["import React, {useReducer, useEffect} from 'react'\nimport axios from 'axios'\n\n\nconst initialState = {\n    loading : true,\n    error : '',\n    post : {}\n}\nconst reducer = (state, action) => {\n    switch(action.type){\n        case 'success':\n            return {\n                loading : true,\n                error : '',\n                post : action.payload\n            }\n            break\n        case 'error':\n            return {\n                loading : false,\n                error : 'Something went wrong',\n                post : {}\n\n            }\n            break\n        default:\n            document.write('DEFAULT')\n            return state\n\n    }\n}\n\nfunction UseReducerDataFetching() {\n\n    const [state ,dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        axios.get(`http://jsonplaceholder.typicode.com/posts/1`)\n        .then(res => {\n            console.log(res)\n            dispatch({type:'success', payload: res.data})\n        })\n        .catch(error => {\n            dispatch({type: 'error'})\n            console.log(error)\n        })\n    },[])\n\n    return (\n        <div>\n            {state.loading ? 'Loading' : state.post.title}\n            {state.error ? state.error : null}\n        </div>\n    )\n}\n\nexport default UseReducerDataFetching\n"]},"metadata":{},"sourceType":"module"}